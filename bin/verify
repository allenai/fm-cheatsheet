#!/usr/bin/env python3
#
# Verify the code by:
#   - Running the integration tests defined in it/ against the running
#     application.
#

import os
import json
import shlex

from argparse import ArgumentParser
from pathlib import Path
from subprocess import check_call, check_output, call
from dataclasses import dataclass, field
from typing import Dict, Optional
from time import sleep

SCRIPT_DIR = Path(os.path.dirname(os.path.realpath(__file__)))
ROOT = SCRIPT_DIR / ".."

def get_app_name() -> str:
    with open(ROOT / "skiff.json", mode="r", encoding="utf-8") as fh:
        return json.load(fh).get("appName")

def check(exit_code: int) -> None:
    if exit_code != 0:
        raise RuntimeError(f"command failed with exit code: {exit_code}")

@dataclass
class Image:
    id: str
    path: str
    dockerfile: str = "Dockerfile"
    build_args: Dict[str, str] = field(default_factory=dict)

    def tag(self) -> str:
        return f"gcr.io/ai2/reviz/{self.id}:latest"

    def build(self) -> str:
        env = os.environ.copy()
        env["DOCKER_BUILDKIT"] = "1"
        args = " ".join([ f"--build-arg {name}={value}" for name, value in self.build_args.items() ])
        cmd = shlex.split(f"""
            docker build
                --tag {self.tag()}
                --file {self.path}/{self.dockerfile}
                {args}
                {self.path}
        """)
        check_call(cmd, cwd=ROOT, env=env)
        return self.digest()

    def digest(self) -> str:
        cmd = shlex.split(f"docker image inspect {self.tag()}")
        info = json.loads(check_output(cmd, cwd=ROOT, encoding="utf-8"))[0]
        return info["Id"]

@dataclass
class Container:
    id: str
    image: str
    host_port: Optional[int] = None
    container_port: Optional[int] = None
    detach: bool = True
    env: Dict[str, str] = field(default_factory=dict)
    network: Optional[str] = None
    tty: bool = False
    init: bool = False

    def start(self, cmd: str = "") -> int:
        env = " ".join([ f"--env {name}={value}" for name, value in self.env.items() ])
        detach = "--detach" if self.detach is True else ""
        publish = ""
        if self.host_port is not None and self.container_port is not None:
            publish = f"--publish {self.host_port}:{self.container_port}"
        network = f"--network {self.network}" if self.network is not None else ""
        tty = "--tty" if self.tty else ""
        init = "--init" if self.init else ""
        start_cmd = shlex.split(f"""
            docker run
                --name {self.id}
                --rm
                {detach}
                {env}
                {publish}
                {network}
                {tty}
                {init}
                {self.image}
                {cmd}
        """)
        return call(start_cmd)

    def run(self, cmd: str = "") -> int:
        return self.start(cmd)

    def stop(self) -> None:
        cmd = shlex.split(f"docker stop {self.id}")
        check_call(cmd)

if __name__ == "__main__":
    parser = ArgumentParser(
        prog="verify",
        description="A helper for running integration tests for your application."
    )

    # Even though there's no arguments, we have to try to parse them
    # in order to provide support for `--help`. We do this for good measure.
    args = parser.parse_args()

    app_name = get_app_name()

    app_id = f"{app_name}-app"
    app_image = Image(app_id, path="app")
    app = Container(
        app_id,
        image=app_image.build(),
        host_port=8000,
        container_port=8000,
        env={ "SKIFF_ENV": "production" },
        init=True
    )
    proxy_id = f"{app_name}-proxy"
    proxy_image = Image(
        proxy_id,
        path="proxy",
        dockerfile="Dockerfile",
        build_args={ "CONF_FILE": 'prod.conf' }
    )
    proxy = Container(
        proxy_id,
        image=proxy_image.build(),
        network="host"
    )

    it_id = f"{app_name}-it"
    it_image = Image(it_id, path="it")
    it = Container(
        it_id,
        image=it_image.build(),
        network="host",
        detach=False,
        tty=True,
        env={ "IT_ORIGIN": "http://localhost:8080" }
    )

    try:
        check(app.start())
        check(proxy.start())
        print("waiting for application to start...")
        is_ready = False
        attempts = 0
        while not is_ready:
            exit_code = it.run(f"check:ready http://localhost:8080")
            is_ready = exit_code == 0
            attempts += 1
            if not is_ready:
                if attempts >= 5:
                    raise RuntimeError("application not ready after 5 attempts")
                print("application is not ready, sleeping for 5 seconds...")
                sleep(5)
        check(it.run())
    finally:
        app.stop()
        proxy.stop()

